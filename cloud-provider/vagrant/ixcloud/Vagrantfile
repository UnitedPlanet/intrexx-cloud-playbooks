# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  config.vm.define "provision" do |prov|
    # The most common configuration options are documented and commented below.
    # For a complete reference, please see the online documentation at
    # https://docs.vagrantup.com.

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    prov.vm.box = "ubuntu/bionic64"

    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    # config.vm.box_check_update = false

    # Create a forwarded port mapping which allows access to a specific port
    # within the machine from a port on the host machine. In the example below,
    # accessing "localhost:8080" will access port 80 on the guest machine.
    # config.vm.network "forwarded_port", guest: 80, host: 8080

    # Create a private network, which allows host-only access to the machine
    # using a specific IP.
    prov.vm.network "private_network", ip: "192.168.55.10"

    # Create a public network, which generally matched to bridged network.
    # Bridged networks make the machine appear as another physical device on
    # your network.
    # config.vm.network "public_network"

    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # config.vm.synced_folder "../data", "/vagrant_data"

    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    prov.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      vb.gui = false
  
      # Customize the amount of memory on the VM:
      vb.memory = 1024
      vb.cpus = 2
    end
    
    # Enable provisioning with a shell script. Additional provisioners such as
    # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
    # documentation for more information about their specific syntax and use.
    prov.vm.provision "shell", inline: <<-SHELL
      printf '\n\n\n' | ssh-keygen -t rsa
      cp /root/.ssh/id_rsa.pub /vagrant/authorized_keys
      cp /root/.ssh/id_rsa  /home/vagrant/.ssh/id_rsa
      chown vagrant:vagrant /home/vagrant/.ssh/id_rsa
      chmod 600 /home/vagrant/.ssh/id_rsa

      apt-get install software-properties-common -y
      apt-add-repository ppa:ansible/ansible -y    
      apt-get update
      apt-get install git -y
      apt-get install ansible python-pip -y
    SHELL

  prov.vm.provision "shell", privileged: false, inline: <<-SHELL
      ansible-galaxy install geerlingguy.nginx
      ansible-galaxy install geerlingguy.nfs
      ansible-galaxy install geerlingguy.postgresql
    SHELL

  end
  
  config.vm.define "db" do |db|
    db.vm.box = "ubuntu/bionic64"
    db.vm.network "private_network", ip: "192.168.55.11"
    db.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = 1024
      vb.cpus = 2
    end

    db.vm.provision "file", source: "./authorized_keys", destination: "/home/vagrant/authorized_keys"
    db.vm.provision "shell", inline: <<-SHELL
        apt-get update
        apt-get install python-minimal -y

        locale-gen en_US.UTF-8
        localedef -i en_US -c -f UTF-8 en_US.UTF-8
        localectl set-locale LANG=en_US.UTF-8   

        printf '\n\n\n' | sudo ssh-keygen -t rsa
        sudo cp authorized_keys /root/.ssh
        sudo chmod 600 /root/.ssh/authorized_keys
    SHELL
  end

  config.vm.define "app1" do |app1|
    app1.vm.box = "ubuntu/bionic64"
    app1.vm.network "private_network", ip: "192.168.55.12"
    app1.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = 2048
      vb.cpus = 2
    end

    app1.vm.provision "file", source: "./authorized_keys", destination: "/home/vagrant/authorized_keys"
    app1.vm.provision "shell", inline: <<-SHELL
        apt-get update
        apt-get install python-minimal -y

        locale-gen en_US.UTF-8
        localedef -i en_US -c -f UTF-8 en_US.UTF-8
        localectl set-locale LANG=en_US.UTF-8   

        printf '\n\n\n' | sudo ssh-keygen -t rsa
        sudo cp authorized_keys /root/.ssh
        sudo chmod 600 /root/.ssh/authorized_keys
    SHELL
  end

  config.vm.define "app2" do |app2|
    app2.vm.box = "ubuntu/bionic64"
    app2.vm.network "private_network", ip: "192.168.55.13"
    app2.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = 2048
      vb.cpus = 2
    end

    app2.vm.provision "file", source: "./authorized_keys", destination: "/home/vagrant/authorized_keys"
    app2.vm.provision "shell", inline: <<-SHELL
        apt-get update
        apt-get install python-minimal -y

        locale-gen en_US.UTF-8
        localedef -i en_US -c -f UTF-8 en_US.UTF-8
        localectl set-locale LANG=en_US.UTF-8   

        printf '\n\n\n' | sudo ssh-keygen -t rsa
        sudo cp authorized_keys /root/.ssh
        sudo chmod 600 /root/.ssh/authorized_keys
    SHELL
  end

  config.vm.define "app3" do |app3|
    app3.vm.box = "ubuntu/bionic64"
    app3.vm.network "private_network", ip: "192.168.55.14"
    app3.vm.provider "virtualbox" do |vb|
      vb.gui = false
      vb.memory = 2048
      vb.cpus = 2
    end

    app3.vm.provision "file", source: "./authorized_keys", destination: "/home/vagrant/authorized_keys"
    app3.vm.provision "shell", inline: <<-SHELL
        apt-get update
        apt-get install python-minimal -y

        locale-gen en_US.UTF-8
        localedef -i en_US -c -f UTF-8 en_US.UTF-8
        localectl set-locale LANG=en_US.UTF-8   

        printf '\n\n\n' | sudo ssh-keygen -t rsa
        sudo cp authorized_keys /root/.ssh
        sudo chmod 600 /root/.ssh/authorized_keys
    SHELL
  end

end
